package xawd.senjinn

import org.scalatest.FlatSpec
import xawd.senjinn.pieces._
import xawd.senjinn.{PieceMovementDirs => pmd}
import xawd.senjinn.ImplicitAreaConverters._


class IndexAlignmentTest extends FlatSpec
{
  "Piece indices" must "be consistent between the different sides" in {
    assert(WhitePawn.index == BlackPawn.index - 6)
    assert(WhiteKnight.index == BlackKnight.index - 6)
    assert(WhiteBishop.index == BlackBishop.index - 6)
    assert(WhiteRook.index == BlackRook.index - 6)
    assert(WhiteQueen.index == BlackQueen.index - 6)
    assert(WhiteKing.index == BlackKing.index - 6)
  }
}

class MoveIntegrationTest extends FlatSpec
{
  //val 
  type PieceLocs = (SquareSet, SquareSet)

}

object Utils
{
  def getSlidingPieceSquaresOfControl(all: SquareSet, loc: BoardSquare, dirs: Iterable[Dir]) = {
    dirs.iterator.flatMap(dir => {
      val squares = loc.allSquares(dir, 8).span(_.intersects(all))
      squares._1 ++ squares._2.take(1)
    }).foldLeft(SquareSet())(_|_)
  }

  val pieceMap = Map(WhitePawn -> ConstraintWhitePawn,
    WhiteKnight -> ConstraintWhiteKnight,
    WhiteBishop -> ConstraintWhiteBishop,
    WhiteRook -> ConstraintWhiteRook,
    WhiteQueen -> ConstraintWhiteQueen,
    WhiteKing -> ConstraintWhiteKing,
    BlackPawn -> ConstraintBlackPawn,
    BlackKnight -> ConstraintBlackKnight,
    BlackBishop -> ConstraintBlackBishop,
    BlackRook -> ConstraintBlackRook,
    BlackQueen -> ConstraintBlackQueen,
    BlackKing -> ConstraintBlackKing)
}

object ConstraintWhitePawn extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    loc.allSquares(pmd("wpa"), 1).foldLeft(SquareSet())(_|_)
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & blacks
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    val all = whites | blacks
    val push = loc.nextSquare(Dir.n).filterNot(_.intersects(all))
    val secondpush = push.filter(sq => 7 < sq.index && sq.index < 16)
      .flatMap(_.nextSquare(Dir.n))
      .filterNot(_.intersects(all))
    val both = Seq(push, secondpush).filter(_.isDefined).map(_.get.loc).fold(0L)(_|_)
    SquareSet(both) | getAttackset(loc, whites, blacks)
  }
}

object ConstraintWhiteKnight extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    loc.allSquares(pmd("n"), 1).foldLeft(SquareSet())(_|_)
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & blacks
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~whites
  }
}

object ConstraintWhiteBishop extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    Utils.getSlidingPieceSquaresOfControl(whites | blacks, loc, pmd("b"))
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & blacks
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~whites
  }
}

object ConstraintWhiteRook extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    Utils.getSlidingPieceSquaresOfControl(whites | blacks, loc, pmd("r"))
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & blacks
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~whites
  }
}

object ConstraintWhiteQueen extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    Utils.getSlidingPieceSquaresOfControl(whites | blacks, loc, pmd("q"))
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & blacks
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~whites
  }
}

object ConstraintWhiteKing extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    Utils.getSlidingPieceSquaresOfControl(whites | blacks, loc, pmd("k"))
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & blacks
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~whites
  }
}

object ConstraintBlackPawn extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    loc.allSquares(pmd("bpa"), 1).foldLeft(SquareSet())(_|_)
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & whites
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    val all = whites | blacks
    val push = loc.nextSquare(Dir.s).filterNot(_.intersects(all))
    val secondpush = push.filter(sq => 47 < sq.index && sq.index < 56)
      .flatMap(_.nextSquare(Dir.s))
      .filterNot(_.intersects(all))
    val both = Seq(push, secondpush).filter(_.isDefined).map(_.get.loc).fold(0L)(_|_)
    SquareSet(both) | getAttackset(loc, whites, blacks)
  }
}

object ConstraintBlackKnight extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    loc.allSquares(pmd("n"), 1).foldLeft(SquareSet())(_|_)
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & whites
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~blacks
  }
}

object ConstraintBlackBishop extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    loc.allSquares(pmd("b"), 1).foldLeft(SquareSet())(_|_)
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & whites
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~blacks
  }
}

object ConstraintBlackRook extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    loc.allSquares(pmd("r"), 1).foldLeft(SquareSet())(_|_)
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & whites
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~blacks
  }
}

object ConstraintBlackQueen extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    loc.allSquares(pmd("q"), 1).foldLeft(SquareSet())(_|_)
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & whites
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~blacks
  }
}

object ConstraintBlackKing extends Moveable
{
  def getControlset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    loc.allSquares(pmd("k"), 1).foldLeft(SquareSet())(_|_)
  }
  
  def getAttackset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & whites
  }
  
  def getMoveset(loc: BoardSquare, whites: SquareSet, blacks: SquareSet) = {
    getControlset(loc, whites, blacks) & ~blacks
  }
}

